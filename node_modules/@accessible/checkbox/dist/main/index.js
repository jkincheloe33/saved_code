"use strict";

exports.__esModule = true;
exports.Checked = Checked;
exports.Unchecked = Unchecked;
exports.Checkmark = Checkmark;
exports.Toggle = Toggle;
exports.Checkbox = exports.useCheckbox = void 0;

var React = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _visuallyHidden = /*#__PURE__*/require("@accessible/visually-hidden");

var _switch = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@react-hook/switch"));

var _clsx = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("clsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const __reactCreateElement__ = React.createElement;
const CheckboxContext = /*#__PURE__*/React.createContext({
  checked: false,
  check: noop,
  uncheck: noop,
  toggle: noop,
  focused: false,
  disabled: false
});

const useCheckbox = () => React.useContext(CheckboxContext);

exports.useCheckbox = useCheckbox;
const Checkbox = /*#__PURE__*/React.forwardRef(({
  checked: controlledChecked,
  defaultChecked,
  disabled = false,
  onChange,
  onFocus,
  onBlur,
  children,
  ...props
}, ref) => {
  const [checked, toggle] = (0, _switch.default)(defaultChecked, controlledChecked, onChange);
  const [focused, setFocused] = React.useState(false);
  const context = React.useMemo(() => ({
    checked: checked,
    check: disabled ? noop : toggle.on,
    uncheck: disabled ? noop : toggle.off,
    toggle: disabled ? noop : toggle,
    focused,
    disabled
  }), [checked, focused, disabled, toggle]);
  return /*#__PURE__*/__reactCreateElement__(CheckboxContext.Provider, {
    value: context
  }, /*#__PURE__*/__reactCreateElement__(_visuallyHidden.VisuallyHidden, null, /*#__PURE__*/__reactCreateElement__("input", {
    type: "checkbox",
    checked: checked,
    ref: ref,
    onChange: () => {
      toggle();
    },
    onFocus: e => {
      setFocused(true);
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
    },
    onBlur: e => {
      setFocused(false);
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
    },
    disabled: disabled,
    ...props
  })), children);
});
exports.Checkbox = Checkbox;

function Checked({
  children
}) {
  return useCheckbox().checked ? /*#__PURE__*/__reactCreateElement__(React.Fragment, null, children) : null;
}

function Unchecked({
  children
}) {
  return !useCheckbox().checked ? /*#__PURE__*/__reactCreateElement__(React.Fragment, null, children) : null;
}

function Checkmark({
  children,
  checkedClass,
  uncheckedClass,
  checkedStyle,
  uncheckedStyle
}) {
  const {
    checked
  } = useCheckbox();
  return /*#__PURE__*/React.cloneElement(children, {
    className: (0, _clsx.default)(children.props.className, checked ? checkedClass : uncheckedClass) || void 0,
    style: Object.assign({}, children.props.style, checked ? checkedStyle : uncheckedStyle)
  });
}

function Toggle({
  children
}) {
  const {
    toggle
  } = useCheckbox();
  return /*#__PURE__*/React.cloneElement(children, {
    onClick: e => {
      var _children$props$onCli, _children$props;

      (_children$props$onCli = (_children$props = children.props).onClick) === null || _children$props$onCli === void 0 ? void 0 : _children$props$onCli.call(_children$props, e);
      toggle();
    }
  });
}

function noop() {}

/* istanbul ignore next */
if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {
  Checkbox.displayName = 'Checkbox';
  Checked.displayName = 'Checked';
  Unchecked.displayName = 'Unchecked';
  Toggle.displayName = 'Toggle';
}