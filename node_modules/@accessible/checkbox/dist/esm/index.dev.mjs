import { useContext, forwardRef, useState, useMemo, Fragment, cloneElement, createElement, createContext } from 'react';
import { VisuallyHidden } from '@accessible/visually-hidden';
import useSwitch from '@react-hook/switch';
import clsx from 'clsx';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var __reactCreateElement__ = createElement;
var CheckboxContext = /*#__PURE__*/createContext({
  checked: false,
  check: noop,
  uncheck: noop,
  toggle: noop,
  focused: false,
  disabled: false
});
var useCheckbox = () => useContext(CheckboxContext);
var Checkbox = /*#__PURE__*/forwardRef((_ref, ref) => {
  var {
    checked: controlledChecked,
    defaultChecked,
    disabled = false,
    onChange,
    onFocus: _onFocus,
    onBlur: _onBlur,
    children
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["checked", "defaultChecked", "disabled", "onChange", "onFocus", "onBlur", "children"]);

  var [checked, toggle] = useSwitch(defaultChecked, controlledChecked, onChange);
  var [focused, setFocused] = useState(false);
  var context = useMemo(() => ({
    checked: checked,
    check: disabled ? noop : toggle.on,
    uncheck: disabled ? noop : toggle.off,
    toggle: disabled ? noop : toggle,
    focused,
    disabled
  }), [checked, focused, disabled, toggle]);
  return /*#__PURE__*/__reactCreateElement__(CheckboxContext.Provider, {
    value: context
  }, /*#__PURE__*/__reactCreateElement__(VisuallyHidden, null, /*#__PURE__*/__reactCreateElement__("input", _extends({
    type: "checkbox",
    checked: checked,
    ref: ref,
    onChange: () => {
      toggle();
    },
    onFocus: e => {
      setFocused(true);
      _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus(e);
    },
    onBlur: e => {
      setFocused(false);
      _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(e);
    },
    disabled: disabled
  }, props))), children);
});
function Checked(_ref2) {
  var {
    children
  } = _ref2;
  return useCheckbox().checked ? /*#__PURE__*/__reactCreateElement__(Fragment, null, children) : null;
}
function Unchecked(_ref3) {
  var {
    children
  } = _ref3;
  return !useCheckbox().checked ? /*#__PURE__*/__reactCreateElement__(Fragment, null, children) : null;
}
function Checkmark(_ref4) {
  var {
    children,
    checkedClass,
    uncheckedClass,
    checkedStyle,
    uncheckedStyle
  } = _ref4;
  var {
    checked
  } = useCheckbox();
  return /*#__PURE__*/cloneElement(children, {
    className: clsx(children.props.className, checked ? checkedClass : uncheckedClass) || void 0,
    style: Object.assign({}, children.props.style, checked ? checkedStyle : uncheckedStyle)
  });
}
function Toggle(_ref5) {
  var {
    children
  } = _ref5;
  var {
    toggle
  } = useCheckbox();
  return /*#__PURE__*/cloneElement(children, {
    onClick: e => {
      var _children$props$onCli, _children$props;

      (_children$props$onCli = (_children$props = children.props).onClick) === null || _children$props$onCli === void 0 ? void 0 : _children$props$onCli.call(_children$props, e);
      toggle();
    }
  });
}

function noop() {}

/* istanbul ignore next */
if (typeof process !== 'undefined' && "production" !== 'production') {
  Checkbox.displayName = 'Checkbox';
  Checked.displayName = 'Checked';
  Unchecked.displayName = 'Unchecked';
  Toggle.displayName = 'Toggle';
}

export { Checkbox, Checked, Checkmark, Toggle, Unchecked, useCheckbox };
//# sourceMappingURL=index.dev.mjs.map
