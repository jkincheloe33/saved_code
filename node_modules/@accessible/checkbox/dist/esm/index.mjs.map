{"version":3,"file":"index.mjs","sources":["../../src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport {VisuallyHidden} from '@accessible/visually-hidden'\nimport useSwitch from '@react-hook/switch'\nimport clsx from 'clsx'\n\nconst CheckboxContext = React.createContext<CheckboxContextValue>({\n  checked: false,\n  check: noop,\n  uncheck: noop,\n  toggle: noop,\n  focused: false,\n  disabled: false,\n})\n\nexport const useCheckbox = () =>\n  React.useContext<CheckboxContextValue>(CheckboxContext)\n\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  (\n    {\n      checked: controlledChecked,\n      defaultChecked,\n      disabled = false,\n      onChange,\n      onFocus,\n      onBlur,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [checked, toggle] = useSwitch(\n      defaultChecked,\n      controlledChecked,\n      onChange\n    )\n    const [focused, setFocused] = React.useState<boolean>(false)\n    const context = React.useMemo(\n      () => ({\n        checked: checked as boolean,\n        check: disabled ? noop : toggle.on,\n        uncheck: disabled ? noop : toggle.off,\n        toggle: disabled ? noop : toggle,\n        focused,\n        disabled,\n      }),\n      [checked, focused, disabled, toggle]\n    )\n\n    return (\n      <CheckboxContext.Provider value={context}>\n        <VisuallyHidden>\n          <input\n            type='checkbox'\n            checked={checked}\n            ref={ref}\n            onChange={() => {\n              toggle()\n            }}\n            onFocus={(e) => {\n              setFocused(true)\n              onFocus?.(e)\n            }}\n            onBlur={(e) => {\n              setFocused(false)\n              onBlur?.(e)\n            }}\n            disabled={disabled}\n            {...props}\n          />\n        </VisuallyHidden>\n\n        {children}\n      </CheckboxContext.Provider>\n    )\n  }\n)\n\nexport function Checked({children}: CheckedProps) {\n  return useCheckbox().checked ? (\n    <React.Fragment>{children}</React.Fragment>\n  ) : null\n}\n\nexport function Unchecked({children}: UncheckedProps) {\n  return !useCheckbox().checked ? (\n    <React.Fragment>{children}</React.Fragment>\n  ) : null\n}\n\nexport function Checkmark({\n  children,\n  checkedClass,\n  uncheckedClass,\n  checkedStyle,\n  uncheckedStyle,\n}: CheckmarkProps) {\n  const {checked} = useCheckbox()\n  return React.cloneElement(children, {\n    className:\n      clsx(children.props.className, checked ? checkedClass : uncheckedClass) ||\n      void 0,\n    style: Object.assign(\n      {},\n      children.props.style,\n      checked ? checkedStyle : uncheckedStyle\n    ),\n  })\n}\n\nexport function Toggle({children}: ToggleProps) {\n  const {toggle} = useCheckbox()\n  return React.cloneElement(children, {\n    onClick: (e: React.MouseEvent<HTMLElement>) => {\n      children.props.onClick?.(e)\n      toggle()\n    },\n  })\n}\n\nfunction noop() {}\n\nexport interface CheckboxProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {\n  checked?: boolean\n  defaultChecked?: boolean\n  disabled?: boolean\n  onChange?: (checked: boolean) => any\n  onFocus?: (event: React.FocusEvent) => any\n  onBlur?: (event: React.FocusEvent) => any\n  children?: React.ReactNode\n}\n\nexport interface CheckedProps {\n  children: React.ReactNode\n}\n\nexport interface UncheckedProps {\n  children: React.ReactNode\n}\n\nexport interface CheckmarkProps {\n  checkedClass?: string\n  uncheckedClass?: string\n  checkedStyle?: React.CSSProperties\n  uncheckedStyle?: React.CSSProperties\n  children: JSX.Element | React.ReactElement\n}\n\nexport interface ToggleProps {\n  children: JSX.Element | React.ReactElement\n}\n\nexport interface CheckboxContextValue {\n  checked: boolean\n  check: () => void\n  uncheck: () => void\n  toggle: () => void\n  focused: boolean\n  disabled: boolean\n}\n\n/* istanbul ignore next */\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n  Checkbox.displayName = 'Checkbox'\n  Checked.displayName = 'Checked'\n  Unchecked.displayName = 'Unchecked'\n  Toggle.displayName = 'Toggle'\n}\n"],"names":["Checked","children","useCheckbox","checked","__reactCreateElement__","React.Fragment","Unchecked","Checkmark","checkedClass","uncheckedClass","checkedStyle","uncheckedStyle","React","className","clsx","props","style","Object","assign","Toggle","toggle","onClick","e","noop","CheckboxContext","check","uncheck","focused","disabled","Checkbox","ref","controlledChecked","defaultChecked","onChange","onFocus","onBlur","useSwitch","setFocused","context","on","off","Provider","value","VisuallyHidden","type"],"mappings":"+MA8EO,SAASA,SAAQC,SAACA,YAChBC,IAAcC,QACnBC,EAACC,OAAgBJ,GACf,KAGC,SAASK,SAAUL,SAACA,YACjBC,IAAcC,QAElB,KADFC,EAACC,OAAgBJ,GAId,SAASM,SAAUN,SACxBA,EADwBO,aAExBA,EAFwBC,eAGxBA,EAHwBC,aAIxBA,EAJwBC,eAKxBA,MAEMR,QAACA,GAAWD,WACXU,EAAmBX,EAAU,CAClCY,UACEC,EAAKb,EAASc,MAAMF,UAAWV,EAAUK,EAAeC,SACxD,EACFO,MAAOC,OAAOC,OACZ,GACAjB,EAASc,MAAMC,MACfb,EAAUO,EAAeC,KAKxB,SAASQ,SAAOlB,SAACA,MAChBmB,OAACA,GAAUlB,WACVU,EAAmBX,EAAU,CAClCoB,QAAUC,yBACRrB,EAASc,OAAMM,+BAAUC,GACzBF,OAKN,SAASG,oRAnHHC,EAAkBZ,EAA0C,CAChET,QAAS,EACTsB,MAAOF,EACPG,QAASH,EACTH,OAAQG,EACRI,QAAS,EACTC,SAAU,IAGC1B,EAAc,IACzBU,EAAuCY,GAE5BK,EAAWjB,EACtB,GAWEkB,SATE3B,QAAS4B,EADXC,eAEEA,EAFFJ,SAGEA,EAAW,EAHbK,SAIEA,EACAC,QAAAA,EACAC,OAAAA,EANFlC,SAOEA,KACGc,2NAIEZ,EAASiB,GAAUgB,EACxBJ,EACAD,EACAE,IAEKN,EAASU,GAAczB,EAAwB,GAChD0B,EAAU1B,EACd,MACET,QAASA,EACTsB,MAAOG,EAAWL,EAAOH,EAAOmB,GAChCb,QAASE,EAAWL,EAAOH,EAAOoB,IAClCpB,OAAQQ,EAAWL,EAAOH,EAC1BO,QAAAA,EACAC,SAAAA,IAEF,CAACzB,EAASwB,EAASC,EAAUR,WAI7BhB,EAACoB,EAAgBiB,UAASC,MAAOJ,GAC/BlC,EAACuC,OACCvC,aACEwC,KAAK,WACLzC,QAASA,EACT2B,IAAKA,EACLG,SAAU,KACRb,KAEFc,QAAUZ,IACRe,EAAW,GACXH,MAAAA,GAAAA,EAAUZ,IAEZa,OAASb,IACPe,EAAW,GACXF,MAAAA,GAAAA,EAASb,IAEXM,SAAUA,GACNb,KAIPd"}