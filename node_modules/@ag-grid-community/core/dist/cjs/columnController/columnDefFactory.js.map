{"version":3,"sources":["../../src/ts/columnController/columnDefFactory.ts"],"names":[],"mappings":"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","file":"columnDefFactory.js","sourcesContent":["import { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { Column } from \"../entities/column\";\nimport { Bean } from \"../context/context\";\nimport { deepCloneDefinition } from \"../utils/object\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { ColumnGroupChild } from \"../entities/columnGroupChild\";\n\n@Bean('columnDefFactory')\nexport class ColumnDefFactory {\n\n    public buildColumnDefs(cols: Column[], rowGroupColumns: Column[], pivotColumns: Column[]): (ColDef | ColGroupDef)[] {\n\n        const res: (ColDef | ColGroupDef)[] = [];\n\n        const colGroupDefs: {[id: string]: ColGroupDef} = {};\n\n        cols.forEach(col => {\n            const colDef = this.createDefFromColumn(col, rowGroupColumns, pivotColumns);\n\n            let addToResult = true;\n\n            let childDef: ColDef | ColGroupDef = colDef;\n            let child: ColumnGroupChild = col;\n\n            while (child.getParent()) {\n\n                const parent = child.getParent() as ColumnGroup;\n\n                let parentDef: ColGroupDef | null | undefined = null;\n\n                // we don't include padding groups, as the column groups provided\n                // by application didn't have these. the whole point of padding groups\n                // is to balance the column tree that the user provided.\n                if (parent.isPadding()) {\n                    child = parent;\n                    continue;\n                }\n\n                // if colDef for this group already exists, use it\n                const existingParentDef = colGroupDefs[parent.getGroupId()];\n                if (existingParentDef) {\n                    existingParentDef.children.push(childDef);\n                    // if we added to result, it would be the second time we did it\n                    addToResult = false;\n                    // we don't want to continue up the tree, as it has already been\n                    // done for this group\n                    break;\n                }\n\n                parentDef = this.createDefFromGroup(parent);\n\n                if (parentDef) {\n                    parentDef.children = [childDef];\n                    colGroupDefs[parentDef.groupId!] = parentDef;\n                    childDef = parentDef;\n                    child = parent;\n                }\n            }\n\n            if (addToResult) {\n                res.push(childDef);\n            }\n        });\n\n        return res;\n    }\n\n    private createDefFromGroup(group: ColumnGroup): ColGroupDef | null | undefined {\n        const defCloned = deepCloneDefinition(group.getColGroupDef(), ['children']);\n\n        if (defCloned) {\n            defCloned.groupId = group.getGroupId();\n        }\n\n        return defCloned;\n    }\n\n    private createDefFromColumn(col: Column, rowGroupColumns: Column[], pivotColumns: Column[]): ColDef {\n        const colDefCloned = deepCloneDefinition(col.getColDef())!;\n\n        colDefCloned.colId = col.getColId();\n\n        colDefCloned.width = col.getActualWidth();\n        colDefCloned.rowGroup = col.isRowGroupActive();\n        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;\n        colDefCloned.pivot = col.isPivotActive();\n        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;\n        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;\n        colDefCloned.hide = col.isVisible() ? undefined : true;\n        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;\n\n        colDefCloned.sort = col.getSort() ? col.getSort() : null;\n        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;\n\n        return colDefCloned;\n    }\n\n}"]}