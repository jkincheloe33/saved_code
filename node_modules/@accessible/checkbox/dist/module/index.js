import * as React from 'react';
const __reactCreateElement__ = React.createElement;
import { VisuallyHidden } from '@accessible/visually-hidden';
import useSwitch from '@react-hook/switch';
import clsx from 'clsx';
const CheckboxContext = /*#__PURE__*/React.createContext({
  checked: false,
  check: noop,
  uncheck: noop,
  toggle: noop,
  focused: false,
  disabled: false
});
export const useCheckbox = () => React.useContext(CheckboxContext);
export const Checkbox = /*#__PURE__*/React.forwardRef(({
  checked: controlledChecked,
  defaultChecked,
  disabled = false,
  onChange,
  onFocus,
  onBlur,
  children,
  ...props
}, ref) => {
  const [checked, toggle] = useSwitch(defaultChecked, controlledChecked, onChange);
  const [focused, setFocused] = React.useState(false);
  const context = React.useMemo(() => ({
    checked: checked,
    check: disabled ? noop : toggle.on,
    uncheck: disabled ? noop : toggle.off,
    toggle: disabled ? noop : toggle,
    focused,
    disabled
  }), [checked, focused, disabled, toggle]);
  return /*#__PURE__*/__reactCreateElement__(CheckboxContext.Provider, {
    value: context
  }, /*#__PURE__*/__reactCreateElement__(VisuallyHidden, null, /*#__PURE__*/__reactCreateElement__("input", {
    type: "checkbox",
    checked: checked,
    ref: ref,
    onChange: () => {
      toggle();
    },
    onFocus: e => {
      setFocused(true);
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
    },
    onBlur: e => {
      setFocused(false);
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
    },
    disabled: disabled,
    ...props
  })), children);
});
export function Checked({
  children
}) {
  return useCheckbox().checked ? /*#__PURE__*/__reactCreateElement__(React.Fragment, null, children) : null;
}
export function Unchecked({
  children
}) {
  return !useCheckbox().checked ? /*#__PURE__*/__reactCreateElement__(React.Fragment, null, children) : null;
}
export function Checkmark({
  children,
  checkedClass,
  uncheckedClass,
  checkedStyle,
  uncheckedStyle
}) {
  const {
    checked
  } = useCheckbox();
  return /*#__PURE__*/React.cloneElement(children, {
    className: clsx(children.props.className, checked ? checkedClass : uncheckedClass) || void 0,
    style: Object.assign({}, children.props.style, checked ? checkedStyle : uncheckedStyle)
  });
}
export function Toggle({
  children
}) {
  const {
    toggle
  } = useCheckbox();
  return /*#__PURE__*/React.cloneElement(children, {
    onClick: e => {
      var _children$props$onCli, _children$props;

      (_children$props$onCli = (_children$props = children.props).onClick) === null || _children$props$onCli === void 0 ? void 0 : _children$props$onCli.call(_children$props, e);
      toggle();
    }
  });
}

function noop() {}

/* istanbul ignore next */
if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {
  Checkbox.displayName = 'Checkbox';
  Checked.displayName = 'Checked';
  Unchecked.displayName = 'Unchecked';
  Toggle.displayName = 'Toggle';
}