(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (global = global || self, factory(global.Checkbox = {}, global.React));
}(this, (function (exports, React) { 'use strict';

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  var VisuallyHidden = function VisuallyHidden(_ref) {
    var children = _ref.children;
    return /*#__PURE__*/React.cloneElement(children, _extends({}, children.props, {
      style: _extends({}, visuallyHidden, children.props.style)
    }));
  };
  var visuallyHidden = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    height: 1,
    width: 1,
    margin: -1,
    padding: 0,
    overflow: 'hidden',
    position: 'absolute'
  };

  if (typeof process !== 'undefined' && "production" !== 'production') {
    VisuallyHidden.displayName = 'VisuallyHidden';
  }

  var useLatest = function useLatest(current) {
    var storedValue = React.useRef(current);
    React.useEffect(function () {
      storedValue.current = current;
    });
    return storedValue;
  };

  /**
   * A hook for creating controlled toggles with on, off, and toggle callbacks.
   * This is extremely useful for creating controlled inputs for components like Checkbox.
   *
   * @param defaultValue Sets the default value of the switch
   * @param controlledValue Sets the controlled value of the switch, which will override
   *  the defaultValue
   * @param onChange A callback invoked whenever toggle callbacks that change state are invoked
   */

  function useSwitch(defaultValue, controlledValue, onChange) {
    if (defaultValue === void 0) {
      defaultValue = false;
    }

    if (onChange === void 0) {
      onChange = noop;
    }

    var _React$useState = React.useState(controlledValue !== null && controlledValue !== void 0 ? controlledValue : defaultValue),
        current = _React$useState[0],
        setCurrent = _React$useState[1];

    var storedOnChange = useLatest(onChange);
    React.useEffect(function () {
      if (typeof controlledValue === 'boolean') {
        setCurrent(controlledValue);
      }
    }, [controlledValue]);
    var toggle = React.useCallback(function () {
      setCurrent(!current);
      storedOnChange.current(!current);
    }, [storedOnChange, current]);
    return [controlledValue !== null && controlledValue !== void 0 ? controlledValue : current, _extends(toggle, {
      on: React.useCallback(function () {
        setCurrent(true);
        if (!current) storedOnChange.current(true);
      }, [storedOnChange, current]),
      off: React.useCallback(function () {
        setCurrent(false);
        if (current) storedOnChange.current(false);
      }, [storedOnChange, current])
    })];
  }

  function noop() {}

  function toVal(mix) {
    var k,
        y,
        str = '';

    if (typeof mix === 'string' || typeof mix === 'number') {
      str += mix;
    } else if (typeof mix === 'object') {
      if (Array.isArray(mix)) {
        for (k = 0; k < mix.length; k++) {
          if (mix[k]) {
            if (y = toVal(mix[k])) {
              str && (str += ' ');
              str += y;
            }
          }
        }
      } else {
        for (k in mix) {
          if (mix[k]) {
            str && (str += ' ');
            str += k;
          }
        }
      }
    }

    return str;
  }

  function clsx () {
    var i = 0,
        tmp,
        x,
        str = '';

    while (i < arguments.length) {
      if (tmp = arguments[i++]) {
        if (x = toVal(tmp)) {
          str && (str += ' ');
          str += x;
        }
      }
    }

    return str;
  }

  var __reactCreateElement__ = React.createElement;
  var CheckboxContext = /*#__PURE__*/React.createContext({
    checked: false,
    check: noop$1,
    uncheck: noop$1,
    toggle: noop$1,
    focused: false,
    disabled: false
  });
  var useCheckbox = function useCheckbox() {
    return React.useContext(CheckboxContext);
  };
  var Checkbox = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var controlledChecked = _ref.checked,
        defaultChecked = _ref.defaultChecked,
        _ref$disabled = _ref.disabled,
        disabled = _ref$disabled === void 0 ? false : _ref$disabled,
        onChange = _ref.onChange,
        _onFocus = _ref.onFocus,
        _onBlur = _ref.onBlur,
        children = _ref.children,
        props = _objectWithoutPropertiesLoose(_ref, ["checked", "defaultChecked", "disabled", "onChange", "onFocus", "onBlur", "children"]);

    var _useSwitch = useSwitch(defaultChecked, controlledChecked, onChange),
        checked = _useSwitch[0],
        toggle = _useSwitch[1];

    var _React$useState = React.useState(false),
        focused = _React$useState[0],
        setFocused = _React$useState[1];

    var context = React.useMemo(function () {
      return {
        checked: checked,
        check: disabled ? noop$1 : toggle.on,
        uncheck: disabled ? noop$1 : toggle.off,
        toggle: disabled ? noop$1 : toggle,
        focused: focused,
        disabled: disabled
      };
    }, [checked, focused, disabled, toggle]);
    return /*#__PURE__*/__reactCreateElement__(CheckboxContext.Provider, {
      value: context
    }, /*#__PURE__*/__reactCreateElement__(VisuallyHidden, null, /*#__PURE__*/__reactCreateElement__("input", _extends({
      type: "checkbox",
      checked: checked,
      ref: ref,
      onChange: function onChange() {
        toggle();
      },
      onFocus: function onFocus(e) {
        setFocused(true);
        _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus(e);
      },
      onBlur: function onBlur(e) {
        setFocused(false);
        _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(e);
      },
      disabled: disabled
    }, props))), children);
  });
  function Checked(_ref2) {
    var children = _ref2.children;
    return useCheckbox().checked ? /*#__PURE__*/__reactCreateElement__(React.Fragment, null, children) : null;
  }
  function Unchecked(_ref3) {
    var children = _ref3.children;
    return !useCheckbox().checked ? /*#__PURE__*/__reactCreateElement__(React.Fragment, null, children) : null;
  }
  function Checkmark(_ref4) {
    var children = _ref4.children,
        checkedClass = _ref4.checkedClass,
        uncheckedClass = _ref4.uncheckedClass,
        checkedStyle = _ref4.checkedStyle,
        uncheckedStyle = _ref4.uncheckedStyle;

    var _useCheckbox = useCheckbox(),
        checked = _useCheckbox.checked;

    return /*#__PURE__*/React.cloneElement(children, {
      className: clsx(children.props.className, checked ? checkedClass : uncheckedClass) || void 0,
      style: _extends({}, children.props.style, checked ? checkedStyle : uncheckedStyle)
    });
  }
  function Toggle(_ref5) {
    var children = _ref5.children;

    var _useCheckbox2 = useCheckbox(),
        toggle = _useCheckbox2.toggle;

    return /*#__PURE__*/React.cloneElement(children, {
      onClick: function onClick(e) {
        var _children$props$onCli, _children$props;

        (_children$props$onCli = (_children$props = children.props).onClick) === null || _children$props$onCli === void 0 ? void 0 : _children$props$onCli.call(_children$props, e);
        toggle();
      }
    });
  }

  function noop$1() {}

  /* istanbul ignore next */
  if (typeof process !== 'undefined' && "production" !== 'production') {
    Checkbox.displayName = 'Checkbox';
    Checked.displayName = 'Checked';
    Unchecked.displayName = 'Unchecked';
    Toggle.displayName = 'Toggle';
  }

  exports.Checkbox = Checkbox;
  exports.Checked = Checked;
  exports.Checkmark = Checkmark;
  exports.Toggle = Toggle;
  exports.Unchecked = Unchecked;
  exports.useCheckbox = useCheckbox;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=checkbox.dev.js.map
